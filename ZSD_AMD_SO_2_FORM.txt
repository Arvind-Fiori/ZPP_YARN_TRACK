*&---------------------------------------------------------------------*
*&  Include           ZSD_AMD_SO_2_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA .

  IF S_ERDAT IS NOT INITIAL.
    SELECT F_WERKS,F_VBELN,F_POSNR,ERDAT,ERZET,ERNAM
      FROM ZMM_STOCK_UPL_2
        INTO TABLE @DATA(IT_UPL2)
          WHERE F_WERKS IN @S_WERKS
            AND F_VBELN IN @S_VBELN
            AND F_POSNR IN @S_POSNR
            AND ERDAT   IN @S_ERDAT
            AND T_VBELN EQ ' '.
  ELSE.
    SELECT F_WERKS F_VBELN F_POSNR ERDAT ERZET ERNAM
      FROM ZMM_STOCK_UPL_2
        INTO TABLE IT_UPL2
          WHERE F_WERKS IN S_WERKS
            AND F_VBELN IN S_VBELN
            AND F_POSNR IN S_POSNR
            AND T_VBELN EQ ' '.
  ENDIF.

  IF IT_UPL2 IS NOT INITIAL.
    SORT IT_UPL2 BY F_VBELN F_POSNR.

    DATA(IT_UPL_SO) = IT_UPL2[].
    SORT IT_UPL_SO BY F_VBELN.
    DELETE ADJACENT DUPLICATES FROM IT_UPL_SO COMPARING F_VBELN.

    SELECT VBELN,AUART,VKORG,VTWEG,SPART,KNUMV,VKBUR,VKGRP,KUNNR,AUGRU,
           ZZ_SORTORDER,ZZ_LIGHT1,ZZ_LIGHT2,ZZ_TESTRE,ZZ_INSSYS,ZZGARMSTYL,
           ZZWASHCARE,ZZSHIPMODE,ZZ_MINROL,ZZ_MAXROL,ZZ_MINPIECE,ZZ_SWATCHES,
           ZZ_HEADEND,ZZ_CHALKMARK,ZZ_MKT_SEG,ZZ_DEVTYPE,ZZFRMPCK,ZZPACKMOD,
           ZZ_GSTYLE_TPD,ZZTRAC,KVGR1,KVGR2,KVGR3,KVGR4
      FROM VBAK
        INTO TABLE @DATA(IT_VBAK)
          FOR ALL ENTRIES IN @IT_UPL2
            WHERE VBELN = @IT_UPL2-F_VBELN.
    IF IT_VBAK IS NOT INITIAL.
      SORT IT_VBAK BY VBELN.
    ENDIF.

    SELECT VBELN,POSNR,BZIRK,BSTKD,BSTDK,INCO1,INCO2,
           ZTERM,PLTYP,KONDA,IHREZ,BSTKD_E,POSEX_E
      FROM VBKD
        INTO TABLE @DATA(IT_VBKD)
          FOR ALL ENTRIES IN @IT_UPL2
            WHERE VBELN = @IT_UPL2-F_VBELN.
    IF IT_VBKD IS NOT INITIAL.
      SORT IT_VBKD BY VBELN POSNR.
    ENDIF.

    SELECT VBELN,POSNR,WERKS,CUOBJ,MATNR,KWMENG,VRKME,KDMAT,UEPOS,LGORT,UEBTO,UNTTO,
           FRMPCK,PACKMOD,ZZCUSREQD,ZZPPCMTDT,ZZOUT_PURC,ZZSTYLENO,ZZFABRICD,ZZORDRQTY,
           GARMGRP,PREBULK,WSHTYE,ZZNOTHANS,ZZTHANSIZ,ZZCHRTPRE,ZZCHARTNO,ZZPAYMTRM,ZZFACTRNM,
           ZZPRICE,ZZDESTINA,ZZTERMDEL,ZZDELIVDT,ZZLCAVAIL,ZZTRADENM,ZZDEVELOP_NO,ZZDEVELOP_ITEM,
           ZZMOU_ORDER,ZZSHADECD,ZZPRINTCD,ZZSTEUC
        FROM VBAP
          INTO TABLE @DATA(IT_VBAP)
            FOR ALL ENTRIES IN @IT_UPL2
              WHERE VBELN = @IT_UPL2-F_VBELN
                AND POSNR = @IT_UPL2-F_POSNR.
    IF IT_VBAP IS NOT INITIAL.
      SORT IT_VBAP BY VBELN POSNR.

      SELECT VBRP~AUBEL,VBRP~AUPOS,VBRP~VBELN,VBRP~POSNR,VBRP~FKIMG,VBRK~VBTYP
        FROM VBRP AS VBRP
          INNER JOIN VBRK AS VBRK
            ON VBRP~VBELN = VBRK~VBELN
              INTO TABLE @DATA(IT_VBRP)
                FOR ALL ENTRIES IN @IT_VBAP
                  WHERE VBRP~AUBEL = @IT_VBAP-VBELN
                    AND VBRP~AUPOS = @IT_VBAP-POSNR
                    AND VBRK~VBTYP = 'M'
                    AND VBRK~FKSTO = ' '.
      IF IT_VBRP IS NOT INITIAL.
        SORT IT_VBRP BY AUBEL AUPOS.
      ENDIF.

      SELECT VBELN
        FROM VBAK
          INTO TABLE @DATA(IT_VBAK_CHK)
            FOR ALL ENTRIES IN @IT_VBAP
              WHERE VBELN = @IT_VBAP-ZZDEVELOP_NO.
      IF IT_VBAK_CHK IS NOT INITIAL.
        SORT IT_VBAK_CHK BY VBELN.
      ENDIF.

      REFRESH : S_KPOSN.
      CLEAR : S_KPOSN.
      S_KPOSN = VALUE #( FOR <GW_VBAP> IN IT_VBAP ( SIGN = 'I'
                                                    OPTION = 'EQ'
                                                    LOW = <GW_VBAP>-POSNR ) )."range
    ENDIF.

    IF IT_VBAK IS NOT INITIAL AND S_KPOSN IS NOT INITIAL.
      SELECT KNUMV,KPOSN,KSCHL,KBETR
        FROM KONV
          INTO TABLE @DATA(IT_KONV)
            FOR ALL ENTRIES IN @IT_VBAK
              WHERE KNUMV = @IT_VBAK-KNUMV
                AND KPOSN IN @S_KPOSN
                AND KSCHL IN ( 'ZE00','ZR00','ZR05','Z005','Z010','Z020','ZTRD','ZCOM',
                               'ZCM1','ZF00','ZD00','ZF10','ZFRT','ZHC0','ZFWC','ZSNC' ).
      IF IT_KONV IS NOT INITIAL.
        SORT IT_KONV BY KNUMV KPOSN.
      ENDIF.
    ENDIF.

    SELECT VBELN,POSNR,PARVW,KUNNR,LIFNR
      FROM VBPA
        INTO TABLE @DATA(IT_VBPA)
          FOR ALL ENTRIES IN @IT_UPL2
            WHERE VBELN = @IT_UPL2-F_VBELN.
*              AND POSNR = @IT_UPL2-F_POSNR.
    IF IT_VBPA IS NOT INITIAL.
      SORT IT_VBPA BY VBELN POSNR.
    ENDIF.

    SELECT F_WERKS,F_LGORT,T_WERKS
      FROM ZMM_STOCK_UPL_1
        INTO TABLE @DATA(IT_ZMM_STOCK_UPL_1)
          FOR ALL ENTRIES IN @IT_UPL2
            WHERE F_WERKS = @IT_UPL2-F_WERKS.

    IF IT_ZMM_STOCK_UPL_1 IS NOT INITIAL.
      SORT IT_ZMM_STOCK_UPL_1 BY F_WERKS.
    ENDIF.

    BREAK ABAP03.

    LOOP AT IT_UPL_SO INTO DATA(WA_UPL_SO).

      CLEAR : WA_HEADER,WA_HEADERX,WA_BPARTNER,WA_VBAK,WA_VBAKX.

      READ TABLE IT_VBAK INTO DATA(WA_VBAKR) WITH KEY VBELN = WA_UPL_SO-F_VBELN BINARY SEARCH.
      IF SY-SUBRC = 0.
        WA_HEADER-DOC_TYPE   = WA_VBAKR-AUART.
        IF WA_VBAKR-VKORG = '1000'.
          WA_HEADER-SALES_ORG  = '2400'.
        ENDIF.
        WA_HEADER-DISTR_CHAN = WA_VBAKR-VTWEG.
        WA_HEADER-DIVISION   = WA_VBAKR-SPART.
        WA_HEADER-SALES_OFF  = WA_VBAKR-VKBUR.
        WA_HEADER-SALES_GRP  = WA_VBAKR-VKGRP.
        WA_HEADER-ORD_REASON = WA_VBAKR-AUGRU.
        WA_HEADER-CUST_GRP1  = WA_VBAKR-KVGR1.
        WA_HEADER-CUST_GRP2  = WA_VBAKR-KVGR2.
        WA_HEADER-CUST_GRP3  = WA_VBAKR-KVGR3.
        WA_HEADER-CUST_GRP4  = WA_VBAKR-KVGR4.

        WA_HEADERX-UPDATEFLAG = 'I'.
        WA_HEADERX-DOC_TYPE   = ABAP_TRUE.
        WA_HEADERX-SALES_ORG  = ABAP_TRUE.
        WA_HEADERX-DISTR_CHAN = ABAP_TRUE.
        WA_HEADERX-DIVISION   = ABAP_TRUE.
        WA_HEADERX-SALES_OFF  = ABAP_TRUE.
        WA_HEADERX-SALES_GRP  = ABAP_TRUE.
        WA_HEADERX-ORD_REASON = ABAP_TRUE.
        WA_HEADERX-CUST_GRP1  = ABAP_TRUE.
        WA_HEADERX-CUST_GRP2  = ABAP_TRUE.
        WA_HEADERX-CUST_GRP3  = ABAP_TRUE.
        WA_HEADERX-CUST_GRP4  = ABAP_TRUE.

        WA_VBAK-ZZ_SORTORDER  = WA_VBAKR-ZZ_SORTORDER.
        WA_VBAK-ZZ_LIGHT1     = WA_VBAKR-ZZ_LIGHT1.
        WA_VBAK-ZZ_LIGHT2     = WA_VBAKR-ZZ_LIGHT2.
        WA_VBAK-ZZ_TESTRE     = WA_VBAKR-ZZ_TESTRE.
        WA_VBAK-ZZ_INSSYS     = WA_VBAKR-ZZ_INSSYS.
        WA_VBAK-ZZWASHCARE    = WA_VBAKR-ZZWASHCARE.
        WA_VBAK-ZZSHIPMODE    = WA_VBAKR-ZZSHIPMODE.
        WA_VBAK-ZZ_MINROL     = WA_VBAKR-ZZ_MINROL.
        WA_VBAK-ZZ_MAXROL     = WA_VBAKR-ZZ_MAXROL.
        WA_VBAK-ZZ_MINPIECE   = WA_VBAKR-ZZ_MINPIECE.
        WA_VBAK-ZZ_SWATCHES   = WA_VBAKR-ZZ_SWATCHES.
        WA_VBAK-ZZ_HEADEND    = WA_VBAKR-ZZ_HEADEND.
        WA_VBAK-ZZ_CHALKMARK  = WA_VBAKR-ZZ_CHALKMARK.
        WA_VBAK-ZZ_MKT_SEG    = WA_VBAKR-ZZ_MKT_SEG.
        WA_VBAK-ZZ_DEVTYPE    = WA_VBAKR-ZZ_DEVTYPE .
        WA_VBAK-ZZFRMPCK      = WA_VBAKR-ZZFRMPCK.
        WA_VBAK-ZZPACKMOD     = WA_VBAKR-ZZPACKMOD.
        WA_VBAK-ZZGARMSTYL    = WA_VBAKR-ZZ_GSTYLE_TPD.
        WA_VBAK-ZZTRAC        = WA_VBAKR-ZZTRAC.

        WA_VBAKX-ZZ_SORTORDER  = ABAP_TRUE.
        WA_VBAKX-ZZ_LIGHT1     = ABAP_TRUE.
        WA_VBAKX-ZZ_LIGHT2     = ABAP_TRUE.
        WA_VBAKX-ZZ_TESTRE     = ABAP_TRUE.
        WA_VBAKX-ZZ_INSSYS     = ABAP_TRUE.
        WA_VBAKX-ZZWASHCARE    = ABAP_TRUE.
        WA_VBAKX-ZZSHIPMODE    = ABAP_TRUE.
        WA_VBAKX-ZZ_MINROL     = ABAP_TRUE.
        WA_VBAKX-ZZ_MAXROL     = ABAP_TRUE.
        WA_VBAKX-ZZ_MINPIECE   = ABAP_TRUE.
        WA_VBAKX-ZZ_SWATCHES   = ABAP_TRUE.
        WA_VBAKX-ZZ_HEADEND    = ABAP_TRUE.
        WA_VBAKX-ZZ_CHALKMARK  = ABAP_TRUE.
        WA_VBAKX-ZZ_MKT_SEG    = ABAP_TRUE.
        WA_VBAKX-ZZ_DEVTYPE    = ABAP_TRUE.
        WA_VBAKX-ZZFRMPCK      = ABAP_TRUE.
        WA_VBAKX-ZZPACKMOD     = ABAP_TRUE.
        WA_VBAKX-ZZGARMSTYL    = ABAP_TRUE.
        WA_VBAKX-ZZTRAC        = ABAP_TRUE.

        BAPE_VBAK  = WA_VBAK.
        BAPE_VBAKX = WA_VBAKX.

        WA_EXTENSIONIN-STRUCTURE = 'BAPE_VBAK'.
        CALL METHOD CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
          EXPORTING
            IM_VALUE               = BAPE_VBAK
          IMPORTING
            EX_CONTAINER           = WA_EXTENSIONIN+30
          EXCEPTIONS
            ILLEGAL_PARAMETER_TYPE = 1
            OTHERS                 = 2.
        APPEND: WA_EXTENSIONIN TO IT_EXTENSIONIN.

        WA_EXTENSIONIN-STRUCTURE = 'BAPE_VBAKX'.
        CALL METHOD CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
          EXPORTING
            IM_VALUE               = BAPE_VBAKX
          IMPORTING
            EX_CONTAINER           = WA_EXTENSIONIN+30
          EXCEPTIONS
            ILLEGAL_PARAMETER_TYPE = 1
            OTHERS                 = 2.
        APPEND: WA_EXTENSIONIN TO IT_EXTENSIONIN.

        IF WA_VBAKR-VBELN IS NOT INITIAL.
          CLEAR : LV_READ_SO.
          LV_READ_SO = WA_VBAKR-VBELN.
          PERFORM FILL_ORDER_TEXT_VBBK USING LV_READ_SO CHANGING IT_ORDER_TEXT.
        ENDIF.

        CLEAR : LV_COUNT,LV_LINE,LV_CNFG_ID,LV_ROOT_ID,WA_VBAP,WA_VBAPX.
        READ TABLE IT_UPL2 TRANSPORTING NO FIELDS WITH KEY F_VBELN = WA_UPL_SO-F_VBELN BINARY SEARCH.
        IF SY-SUBRC = 0.

          LOOP AT IT_UPL2 INTO DATA(WA_SO) FROM SY-TABIX.
            IF WA_SO-F_VBELN <> WA_UPL_SO-F_VBELN.
              EXIT.
            ENDIF.

            READ TABLE IT_VBAP INTO DATA(WA_VBAPR) WITH KEY VBELN = WA_SO-F_VBELN
                                                            POSNR = WA_SO-F_POSNR BINARY SEARCH.
            IF SY-SUBRC = 0.
              ADD '000001'   TO LV_COUNT.
              ADD '0001'     TO LV_LINE.
              ADD '000001'   TO LV_CNFG_ID.
              ADD '00000001' TO LV_ROOT_ID.

              WA_BITEM-ITM_NUMBER = LV_COUNT.
              WA_BITEM-PO_ITM_NO  = LV_COUNT.
              WA_BITEM-REF_1_S    = WA_VBAPR-VBELN.
              WA_BITEM-POITM_NO_S = WA_VBAPR-POSNR.
              WA_BITEM-MATERIAL   = WA_VBAPR-MATNR.
              IF WA_VBAPR-VRKME IS NOT INITIAL.
                CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
                  EXPORTING
                    INPUT    = WA_VBAPR-VRKME
                    LANGUAGE = SY-LANGU
                  IMPORTING
                    OUTPUT   = WA_BITEM-SALES_UNIT.
              ENDIF.
*              WA_BITEM-SALES_UNIT = WA_VBAPR-VRKME.
              WA_BITEM-CUST_MAT35 = WA_VBAPR-KDMAT.
              WA_BITEM-HG_LV_ITEM = WA_VBAPR-UEPOS.
              WA_BITEM-STORE_LOC  = WA_VBAPR-LGORT.
              WA_BITEM-OVERDLVTOL = WA_VBAPR-UEBTO.

              IF WA_VBAPR-WERKS IS NOT INITIAL.
                READ TABLE IT_ZMM_STOCK_UPL_1 INTO DATA(WA_UPL_1) WITH KEY F_WERKS = WA_VBAPR-WERKS BINARY SEARCH.
                IF SY-SUBRC = 0.
                  WA_BITEM-PLANT      = WA_UPL_1-T_WERKS.
                  WA_BITEMX-PLANT     = ABAP_TRUE.
                ENDIF.
                CLEAR : WA_UPL_1.
              ENDIF.

              WA_BITEMX-UPDATEFLAG = 'I'.
              WA_BITEMX-ITM_NUMBER = LV_COUNT.
              WA_BITEMX-PO_ITM_NO  = ABAP_TRUE.
              WA_BITEMX-REF_1_S    = ABAP_TRUE.
              WA_BITEMX-POITM_NO_S = ABAP_TRUE.
              WA_BITEMX-MATERIAL   = ABAP_TRUE.
              WA_BITEMX-SALES_UNIT = ABAP_TRUE.
              WA_BITEMX-CUST_MAT35 = ABAP_TRUE.
              WA_BITEMX-HG_LV_ITEM = ABAP_TRUE.
              WA_BITEMX-STORE_LOC  = ABAP_TRUE.
              WA_BITEMX-UNDDLV_TOL = ABAP_TRUE.
              WA_BITEMX-OVERDLVTOL = ABAP_TRUE.

              DATA(LV_VBRP_FKIMG) = REDUCE VBRP-FKIMG( INIT VAL TYPE VBRP-FKIMG
                                                        FOR WA_INC IN IT_VBRP
                                                      WHERE ( AUBEL EQ WA_VBAPR-VBELN
                                                        AND   AUPOS EQ WA_VBAPR-POSNR )
                                                       NEXT VAL = VAL + WA_INC-FKIMG ).

              WA_BSCHEDULE-ITM_NUMBER = LV_COUNT.
              WA_BSCHEDULE-REQ_QTY    = ( WA_VBAPR-KWMENG - LV_VBRP_FKIMG ).
              APPEND WA_BSCHEDULE TO IT_BSCHEDULE.
              CLEAR : WA_BSCHEDULE,LV_VBRP_FKIMG.

              WA_BSCHEDULEX-ITM_NUMBER  = LV_COUNT.
              WA_BSCHEDULEX-REQ_QTY     = ABAP_TRUE.
              APPEND WA_BSCHEDULEX TO IT_BSCHEDULEX.
              CLEAR : WA_BSCHEDULEX.

              READ TABLE IT_VBKD INTO DATA(WA_VBKD) WITH KEY VBELN = WA_VBAPR-VBELN
                                                             POSNR = WA_VBAPR-POSNR BINARY SEARCH.
              IF SY-SUBRC = 0.
                WA_HEADER-SALES_DIST = WA_VBKD-BZIRK.
                WA_HEADER-PURCH_NO_C = WA_VBKD-BSTKD.
                WA_HEADER-PURCH_DATE = WA_VBKD-BSTDK.
                WA_HEADER-INCOTERMS1 = WA_VBKD-INCO1.
                WA_HEADER-INCOTERMS2 = WA_VBKD-INCO2.
                WA_HEADER-PRICE_LIST = WA_VBKD-PLTYP.
                WA_HEADER-PRICE_GRP  = WA_VBKD-KONDA.
                WA_HEADER-PMNTTRMS   = WA_VBKD-ZTERM.

                WA_BITEM-REF_1_S     = WA_VBKD-BSTKD_E.
                WA_BITEM-POITM_NO_S  = WA_VBKD-POSEX_E.

                WA_HEADERX-SALES_DIST = ABAP_TRUE.
                WA_HEADERX-PURCH_NO_C = ABAP_TRUE.
                WA_HEADERX-PURCH_DATE = ABAP_TRUE.
                WA_HEADERX-INCOTERMS1 = ABAP_TRUE.
                WA_HEADERX-INCOTERMS2 = ABAP_TRUE.
                WA_HEADERX-PRICE_LIST = ABAP_TRUE.
                WA_HEADERX-PRICE_GRP  = ABAP_TRUE.
                WA_HEADERX-PMNTTRMS   = ABAP_TRUE.

                WA_BITEMX-REF_1_S    = ABAP_TRUE.
                WA_BITEMX-POITM_NO_S = ABAP_TRUE.

              ELSE.
                READ TABLE IT_VBKD INTO WA_VBKD WITH KEY VBELN = WA_VBAPR-VBELN BINARY SEARCH.
                IF SY-SUBRC = 0.
                  WA_HEADER-SALES_DIST = WA_VBKD-BZIRK.
                  WA_HEADER-PURCH_NO_C = WA_VBKD-BSTKD.
                  WA_HEADER-PURCH_DATE = WA_VBKD-BSTDK.
                  WA_HEADER-INCOTERMS1 = WA_VBKD-INCO1.
                  WA_HEADER-INCOTERMS2 = WA_VBKD-INCO2.
                  WA_HEADER-PRICE_LIST = WA_VBKD-PLTYP.
                  WA_HEADER-PRICE_GRP  = WA_VBKD-KONDA.
                  WA_HEADER-PMNTTRMS   = WA_VBKD-ZTERM.

                  WA_BITEM-REF_1_S     = WA_VBKD-BSTKD_E.
                  WA_BITEM-POITM_NO_S  = WA_VBKD-POSEX_E.

                  WA_HEADERX-SALES_DIST = ABAP_TRUE.
                  WA_HEADERX-PURCH_NO_C = ABAP_TRUE.
                  WA_HEADERX-PURCH_DATE = ABAP_TRUE.
                  WA_HEADERX-INCOTERMS1 = ABAP_TRUE.
                  WA_HEADERX-INCOTERMS2 = ABAP_TRUE.
                  WA_HEADERX-PRICE_LIST = ABAP_TRUE.
                  WA_HEADERX-PRICE_GRP  = ABAP_TRUE.
                  WA_HEADERX-PMNTTRMS   = ABAP_TRUE.

                  WA_BITEMX-REF_1_S    = ABAP_TRUE.
                  WA_BITEMX-POITM_NO_S = ABAP_TRUE.

                ENDIF.
              ENDIF.

              WA_VBAP-VBELN          = ' '.
              WA_VBAP-POSNR          = LV_COUNT.
              WA_VBAP-FRMPCK         = WA_VBAPR-FRMPCK.
              WA_VBAP-PACKMOD        = WA_VBAPR-PACKMOD.
              WA_VBAP-ZZOUT_PURC     = WA_VBAPR-ZZOUT_PURC.

              IF WA_VBAPR-ZZCUSREQD IS NOT INITIAL.
                IF WA_VBAPR-ZZCUSREQD LT SY-DATUM.
                  WA_VBAP-ZZCUSREQD   = SY-DATUM.
                ELSE.
                  WA_VBAP-ZZCUSREQD   = WA_VBAPR-ZZCUSREQD.
                ENDIF.
              ELSE.
                WA_VBAP-ZZCUSREQD     = SY-DATUM.
              ENDIF.

              WA_VBAP-ZZPPCMTDT      = WA_VBAPR-ZZPPCMTDT.
              WA_VBAP-ZZSTYLENO      = WA_VBAPR-ZZSTYLENO.
              WA_VBAP-ZZFABRICD      = WA_VBAPR-ZZFABRICD.
              WA_VBAP-GARMGRP        = WA_VBAPR-GARMGRP.
              WA_VBAP-PREBULK        = WA_VBAPR-PREBULK.
              WA_VBAP-WSHTYE         = WA_VBAPR-WSHTYE.
              WA_VBAP-ZZNOTHANS      = WA_VBAPR-ZZNOTHANS.
              WA_VBAP-ZZTHANSIZ      = WA_VBAPR-ZZTHANSIZ.
              WA_VBAP-ZZCHRTPRE      = WA_VBAPR-ZZCHRTPRE.
              WA_VBAP-ZZCHARTNO      = WA_VBAPR-ZZCHARTNO.
              WA_VBAP-ZZPAYMTRM      = WA_VBAPR-ZZPAYMTRM.
              WA_VBAP-ZZORDRQTY      = WA_VBAPR-ZZORDRQTY.
              WA_VBAP-ZZFACTRNM      = WA_VBAPR-ZZFACTRNM.
              WA_VBAP-ZZPRICE        = WA_VBAPR-ZZPRICE.
              WA_VBAP-ZZDESTINA      = WA_VBAPR-ZZDESTINA.
              WA_VBAP-ZZTERMDEL      = WA_VBAPR-ZZTERMDEL.
              WA_VBAP-ZZDELIVDT      = WA_VBAPR-ZZDELIVDT.
              WA_VBAP-ZZLCAVAIL      = WA_VBAPR-ZZLCAVAIL.
              WA_VBAP-ZZTRADENM      = WA_VBAPR-ZZTRADENM.
              WA_VBAP-ZZSTEUC        = WA_VBAPR-ZZSTEUC.

              IF WA_VBAPR-ZZDEVELOP_NO IS NOT INITIAL.
                READ TABLE IT_VBAK_CHK INTO DATA(WA_CHK) WITH KEY VBELN = WA_VBAPR-ZZDEVELOP_NO  BINARY SEARCH.
                IF SY-SUBRC = 0.
                  WA_VBAP-ZZDEVELOP_NO   = WA_VBAPR-ZZDEVELOP_NO.
                ELSE.
                  WA_VBAP-ZZDEVELOP_NO   = WA_VBAPR-VBELN.
                ENDIF.
                CLEAR : WA_CHK.
              ELSE.
                IF WA_VBAKR-SPART = '25'.
                  WA_VBAP-ZZDEVELOP_NO   = WA_VBAPR-VBELN.
                ENDIF.
              ENDIF.

              IF WA_VBAPR-ZZDEVELOP_ITEM IS NOT INITIAL.
                WA_VBAP-ZZDEVELOP_ITEM = WA_VBAPR-ZZDEVELOP_ITEM.
              ELSE.
                IF WA_VBAKR-SPART = '25'.
                  WA_VBAP-ZZDEVELOP_ITEM = WA_VBAPR-POSNR.
                ENDIF.
              ENDIF.

              IF WA_VBAKR-SPART = '25' AND WA_VBAPR-ZZMOU_ORDER IS INITIAL.
                WA_VBAP-ZZMOU_ORDER    = 'N'.
              ELSE.
                WA_VBAP-ZZMOU_ORDER    = WA_VBAPR-ZZMOU_ORDER.
              ENDIF.
              WA_VBAP-ZZSHADECD      = WA_VBAPR-ZZSHADECD.
              WA_VBAP-ZZPRINTCD      = WA_VBAPR-ZZPRINTCD.

              WA_VBAPX-VBELN          = ' '.
              WA_VBAPX-POSNR          = LV_COUNT.
              WA_VBAPX-FRMPCK         = ABAP_TRUE.
              WA_VBAPX-PACKMOD        = ABAP_TRUE.
              WA_VBAPX-ZZOUT_PURC     = ABAP_TRUE.
              WA_VBAPX-ZZCUSREQD      = ABAP_TRUE.
              WA_VBAPX-ZZPPCMTDT      = ABAP_TRUE.
              WA_VBAPX-ZZSTYLENO      = ABAP_TRUE.
              WA_VBAPX-ZZFABRICD      = ABAP_TRUE.
              WA_VBAPX-GARMGRP        = ABAP_TRUE.
              WA_VBAPX-PREBULK        = ABAP_TRUE.
              WA_VBAPX-WSHTYE         = ABAP_TRUE.
              WA_VBAPX-ZZNOTHANS      = ABAP_TRUE.
              WA_VBAPX-ZZTHANSIZ      = ABAP_TRUE.
              WA_VBAPX-ZZCHRTPRE      = ABAP_TRUE.
              WA_VBAPX-ZZCHARTNO      = ABAP_TRUE.
              WA_VBAPX-ZZPAYMTRM      = ABAP_TRUE.
              WA_VBAPX-ZZORDRQTY      = ABAP_TRUE.
              WA_VBAPX-ZZFACTRNM      = ABAP_TRUE.
              WA_VBAPX-ZZPRICE        = ABAP_TRUE.
              WA_VBAPX-ZZDESTINA      = ABAP_TRUE.
              WA_VBAPX-ZZTERMDEL      = ABAP_TRUE.
              WA_VBAPX-ZZSTEUC        = ABAP_TRUE.
              WA_VBAPX-ZZDELIVDT      = ABAP_TRUE.
              WA_VBAPX-ZZLCAVAIL      = ABAP_TRUE.
              WA_VBAPX-ZZTRADENM      = ABAP_TRUE.
              WA_VBAPX-ZZDEVELOP_NO   = ABAP_TRUE.
              WA_VBAPX-ZZDEVELOP_ITEM = ABAP_TRUE.
              WA_VBAPX-ZZMOU_ORDER    = ABAP_TRUE.
              WA_VBAPX-ZZSHADECD      = ABAP_TRUE.
              WA_VBAPX-ZZPRINTCD      = ABAP_TRUE.

              BAPE_VBAP  = WA_VBAP.
              BAPE_VBAPX = WA_VBAPX.

              WA_EXTENSIONIN-STRUCTURE = 'BAPE_VBAP'.
              CALL METHOD CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
                EXPORTING
                  IM_VALUE               = BAPE_VBAP
                IMPORTING
                  EX_CONTAINER           = WA_EXTENSIONIN+30
                EXCEPTIONS
                  ILLEGAL_PARAMETER_TYPE = 1
                  OTHERS                 = 2.
              APPEND: WA_EXTENSIONIN TO IT_EXTENSIONIN.

              WA_EXTENSIONIN-STRUCTURE = 'BAPE_VBAPX'.
              CALL METHOD CL_ABAP_CONTAINER_UTILITIES=>FILL_CONTAINER_C
                EXPORTING
                  IM_VALUE               = BAPE_VBAPX
                IMPORTING
                  EX_CONTAINER           = WA_EXTENSIONIN+30
                EXCEPTIONS
                  ILLEGAL_PARAMETER_TYPE = 1
                  OTHERS                 = 2.
              APPEND: WA_EXTENSIONIN TO IT_EXTENSIONIN.

              READ TABLE IT_VBPA TRANSPORTING NO FIELDS WITH KEY VBELN = WA_SO-F_VBELN
                                                                 POSNR = WA_SO-F_POSNR BINARY SEARCH.
              IF SY-SUBRC = 0.
                LOOP AT IT_VBPA INTO DATA(WA_VBPA) FROM SY-TABIX.
                  IF WA_VBPA-VBELN <> WA_SO-F_VBELN OR WA_VBPA-POSNR <> WA_SO-F_POSNR.
                    EXIT.
                  ENDIF.
                  IF WA_VBPA-PARVW = 'RE' OR WA_VBPA-PARVW = 'AG' OR
                     WA_VBPA-PARVW = 'RG' OR WA_VBPA-PARVW = 'WE'.

                    CLEAR : WA_BPARTNER.
                    WA_BPARTNER-PARTN_ROLE = WA_VBPA-PARVW.
                    WA_BPARTNER-PARTN_NUMB = WA_VBPA-KUNNR.
                    APPEND WA_BPARTNER TO IT_BPARTNER.
                    CLEAR : WA_BPARTNER.

                  ELSEIF WA_VBPA-PARVW = 'VA'.

                    CLEAR : WA_BPARTNER.
                    WA_BPARTNER-PARTN_ROLE = WA_VBPA-PARVW.
                    WA_BPARTNER-PARTN_NUMB = WA_VBPA-LIFNR.
                    APPEND WA_BPARTNER TO IT_BPARTNER.
                    CLEAR : WA_BPARTNER.
                  ENDIF.
                ENDLOOP.
              ELSE.
                READ TABLE IT_VBPA TRANSPORTING NO FIELDS WITH KEY VBELN = WA_SO-F_VBELN BINARY SEARCH.
                IF SY-SUBRC = 0.
                  CLEAR : WA_VBPA.
                  LOOP AT IT_VBPA INTO WA_VBPA FROM SY-TABIX.
                    IF WA_VBPA-VBELN <> WA_SO-F_VBELN.
                      EXIT.
                    ENDIF.
                    IF WA_VBPA-PARVW = 'RE' OR WA_VBPA-PARVW = 'AG' OR
                       WA_VBPA-PARVW = 'RG' OR WA_VBPA-PARVW = 'WE'.

                      CLEAR : WA_BPARTNER.
                      WA_BPARTNER-PARTN_ROLE = WA_VBPA-PARVW.
                      WA_BPARTNER-PARTN_NUMB = WA_VBPA-KUNNR.
                      APPEND WA_BPARTNER TO IT_BPARTNER.
                      CLEAR : WA_BPARTNER.

                    ELSEIF WA_VBPA-PARVW = 'VA'.

                      CLEAR : WA_BPARTNER.
                      WA_BPARTNER-PARTN_ROLE = WA_VBPA-PARVW.
                      WA_BPARTNER-PARTN_NUMB = WA_VBPA-LIFNR.
                      APPEND WA_BPARTNER TO IT_BPARTNER.
                      CLEAR : WA_BPARTNER.
                    ENDIF.
                  ENDLOOP.
                ENDIF.
              ENDIF.

              READ TABLE IT_KONV TRANSPORTING NO FIELDS WITH KEY KNUMV = WA_VBAKR-KNUMV
                                                                 KPOSN = WA_VBAPR-POSNR BINARY SEARCH.
              IF SY-SUBRC = 0.

                LOOP AT IT_KONV INTO DATA(WA_KONVR) FROM SY-TABIX.
                  IF WA_KONVR-KNUMV <> WA_VBAKR-KNUMV OR WA_KONVR-KPOSN <> WA_VBAPR-POSNR.
                    EXIT.
                  ENDIF.

                  WA_BAPICOND-ITM_NUMBER = LV_COUNT.
                  WA_BAPICOND-COND_TYPE  = WA_KONVR-KSCHL.

                  IF WA_KONVR-KBETR LT 0.
                    WA_KONVR-KBETR = ( WA_KONVR-KBETR * -1 ).
                  ENDIF.

                  IF WA_KONVR-KSCHL = 'ZR00' OR WA_KONVR-KSCHL = 'Z005' OR WA_KONVR-KSCHL = 'Z010' OR
                     WA_KONVR-KSCHL = 'ZCOM' OR WA_KONVR-KSCHL = 'ZCM1' OR WA_KONVR-KSCHL = 'ZF00' OR
                     WA_KONVR-KSCHL = 'ZF10'.
                    WA_BAPICOND-COND_VALUE = WA_KONVR-KBETR / 10.
                  ELSE.
                    WA_BAPICOND-COND_VALUE = WA_KONVR-KBETR.
                  ENDIF.

                  APPEND WA_BAPICOND  TO IT_BAPICOND.
                  CLEAR : WA_BAPICOND.
                ENDLOOP.

              ENDIF. " IF SY-SUBRC = 0.

              IF WA_VBAKR-VBELN IS NOT INITIAL AND WA_VBAPR-POSNR IS NOT INITIAL.
                CLEAR : LV_READ_SO.
                CONCATENATE WA_VBAKR-VBELN WA_VBAPR-POSNR INTO LV_READ_SO.
                CONDENSE : LV_READ_SO.
                PERFORM FILL_ORDER_TEXT_VBBP USING LV_READ_SO LV_COUNT CHANGING IT_ORDER_TEXT.
              ENDIF.

              IF WA_VBAPR-CUOBJ IS NOT INITIAL.
                CLEAR : LV_CUOBJ.
                LV_CUOBJ = WA_VBAPR-CUOBJ.
                PERFORM GET_CONFIGURATION_DATA USING LV_CUOBJ
                                                     WA_VBAKR-SPART
                                                     LV_CNFG_ID
                                                     LV_ROOT_ID
                                                     CHANGING IT_BSALES_CFGS_VALUE
                                                              IT_BSALES_CFGS_VK.

                WA_BSALES_CFGS_INST-CONFIG_ID       = LV_CNFG_ID.
                WA_BSALES_CFGS_INST-INST_ID         = LV_ROOT_ID.
                WA_BSALES_CFGS_INST-OBJ_TYPE        = 'MARA'.
                WA_BSALES_CFGS_INST-CLASS_TYPE      = '300'.
                WA_BSALES_CFGS_INST-OBJ_KEY         = WA_VBAPR-MATNR.
                WA_BSALES_CFGS_INST-QUANTITY        = WA_VBAPR-KWMENG.
                WA_BSALES_CFGS_INST-QUANTITY_UNIT   = WA_VBAPR-VRKME.
                WA_BSALES_CFGS_INST-COMPLETE        = 'T'.
                WA_BSALES_CFGS_INST-CONSISTENT      = 'T'.
                WA_BSALES_CFGS_INST-PERSIST_ID_TYPE = 'G'.
                APPEND WA_BSALES_CFGS_INST TO IT_BSALES_CFGS_INST.
                CLEAR : WA_BSALES_CFGS_INST.

                WA_ORDER_CFGS_REFINST-POSEX     = LV_COUNT.
                WA_ORDER_CFGS_REFINST-CONFIG_ID = LV_CNFG_ID.
                WA_ORDER_CFGS_REFINST-INST_ID   = LV_ROOT_ID.
                APPEND WA_ORDER_CFGS_REFINST TO IT_ORDER_CFGS_REFINST.
                CLEAR : WA_ORDER_CFGS_REFINST.

                WA_BSALES_CFGS_REF-POSEX         = LV_COUNT.
                WA_BSALES_CFGS_REF-CONFIG_ID     = LV_CNFG_ID.
                WA_BSALES_CFGS_REF-ROOT_ID       = LV_ROOT_ID.
                WA_BSALES_CFGS_REF-SCE           = ' '.
                WA_BSALES_CFGS_REF-COMPLETE      = 'T'.
                WA_BSALES_CFGS_REF-CONSISTENT    = 'T'.
                WA_BSALES_CFGS_REF-CBASE_ID_TYPE = 'G'.
                APPEND WA_BSALES_CFGS_REF TO IT_BSALES_CFGS_REF.
                CLEAR : WA_BSALES_CFGS_REF.

              ENDIF. " IF WA_VBAPR-CUOBJ IS NOT INITIAL.

              CLEAR : WA_ZMM_STOCK_UPL_2.
              WA_ZMM_STOCK_UPL_2-F_WERKS = WA_VBAPR-WERKS.
              WA_ZMM_STOCK_UPL_2-F_VBELN = WA_VBAPR-VBELN.
              WA_ZMM_STOCK_UPL_2-F_POSNR = WA_VBAPR-POSNR.
              WA_ZMM_STOCK_UPL_2-T_WERKS = WA_BITEM-PLANT.
              WA_ZMM_STOCK_UPL_2-T_POSNR = WA_BITEM-ITM_NUMBER.
              WA_ZMM_STOCK_UPL_2-ERDAT   = WA_SO-ERDAT.
              WA_ZMM_STOCK_UPL_2-ERNAM   = WA_SO-ERZET.
              WA_ZMM_STOCK_UPL_2-ERZET   = WA_SO-ERNAM.
              APPEND WA_ZMM_STOCK_UPL_2 TO IT_ZMM_STOCK_UPL_2.
              CLEAR : WA_ZMM_STOCK_UPL_2.

              APPEND WA_BITEM TO IT_BITEM.
              APPEND WA_BITEMX TO IT_BITEMX.
              CLEAR : WA_BITEM,WA_BITEMX.

            ENDIF. " IF SY-SUBRC = 0.

          ENDLOOP. " LOOP AT IT_UPL2 INTO DATA(WA_SO) FROM SY-TABIX.

        ENDIF. " IF SY-SUBRC = 0.

        """"" bapi
        CLEAR : LV_SALES_ORDER,IT_RETURN[].

        IF IT_BITEM IS NOT INITIAL.
          BREAK ABAP03.
          CLEAR : LV_SALES_ORDER.
          CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
            EXPORTING
              ORDER_HEADER_IN      = WA_HEADER
              ORDER_HEADER_INX     = WA_HEADERX
            IMPORTING
              SALESDOCUMENT        = LV_SALES_ORDER
            TABLES
              RETURN               = IT_RETURN
              ORDER_ITEMS_IN       = IT_BITEM
              ORDER_ITEMS_INX      = IT_BITEMX
              ORDER_PARTNERS       = IT_BPARTNER
              ORDER_SCHEDULES_IN   = IT_BSCHEDULE
              ORDER_SCHEDULES_INX  = IT_BSCHEDULEX
              ORDER_CFGS_REF       = IT_BSALES_CFGS_REF
              ORDER_CFGS_INST      = IT_BSALES_CFGS_INST
              ORDER_CFGS_VALUE     = IT_BSALES_CFGS_VALUE
              ORDER_CFGS_VK        = IT_BSALES_CFGS_VK
              ORDER_CONDITIONS_IN  = IT_BAPICOND
              ORDER_CONDITIONS_INX = IT_BAPICONDX
              ORDER_TEXT           = IT_ORDER_TEXT
              EXTENSIONIN          = IT_EXTENSIONIN
              EXTENSIONEX          = IT_EXTENSIONINX
              ORDER_CFGS_REFINST   = IT_ORDER_CFGS_REFINST.

          BREAK ABAP03.
          IF LV_SALES_ORDER IS NOT INITIAL.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                WAIT = ABAP_TRUE.
            WAIT UP TO 2 SECONDS.

            CLEAR : WA_ZMM_STOCK_UPL_2.
            WA_ZMM_STOCK_UPL_2-T_VBELN = LV_SALES_ORDER.
            MODIFY IT_ZMM_STOCK_UPL_2
              FROM WA_ZMM_STOCK_UPL_2
                TRANSPORTING T_VBELN
                  WHERE F_VBELN = WA_UPL_SO-F_VBELN.
            CLEAR : WA_ZMM_STOCK_UPL_2.

            CLEAR : WA_ERROR.
            WA_ERROR-VBELN    = WA_UPL_SO-F_VBELN.
            WA_ERROR-ZSTATUS  = 'S'.
            WA_ERROR-VBELN_N  = LV_SALES_ORDER.
            WA_ERROR-ZMESSAGE = 'New SO Created'.
            APPEND WA_ERROR TO IT_ERROR.
            CLEAR : WA_ERROR.

          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

            LOOP AT IT_RETURN INTO DATA(WA_RETURN) WHERE TYPE = 'E'.
              CLEAR : WA_ERROR.
              WA_ERROR-VBELN    = WA_UPL_SO-F_VBELN.
              WA_ERROR-ZSTATUS  = 'E'.
              WA_ERROR-ZMESSAGE = WA_RETURN-MESSAGE.
              APPEND WA_ERROR TO IT_ERROR.
              CLEAR : WA_ERROR.
            ENDLOOP.

          ENDIF.

        ENDIF. " IF IT_BITEM IS NOT INITIAL.

        CLEAR : WA_HEADER,WA_HEADERX,IT_BITEM[],IT_RETURN[],
                IT_BITEMX[],IT_BPARTNER[],IT_BSCHEDULE[],IT_BSCHEDULEX[],
                IT_BSALES_CFGS_REF[],IT_BSALES_CFGS_INST,IT_BSALES_CFGS_VALUE[],
                IT_BSALES_CFGS_VK[],IT_BAPICOND[],IT_BAPICONDX,IT_ORDER_TEXT[],
                IT_EXTENSIONIN[],IT_EXTENSIONINX[],IT_ORDER_CFGS_REFINST[],
                LV_COUNT,LV_LINE,LV_CNFG_ID,LV_ROOT_ID,LV_SALES_ORDER.

      ENDIF. " IF SY-SUBRC = 0.
      CLEAR : WA_VBAK,WA_VBKD.
    ENDLOOP. " LOOP AT IT_UPL_SO INTO DATA(WA_UPL_SO).

  ELSE.
    MESSAGE : 'No data found' TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.

  IF IT_ZMM_STOCK_UPL_2 IS NOT INITIAL.
    MODIFY ZMM_STOCK_UPL_2 FROM TABLE IT_ZMM_STOCK_UPL_2.
    IF SY-SUBRC = 0.
      COMMIT WORK.
*      MESSAGE 'Sales orders are created successfully' TYPE 'S'.
    ENDIF.
    REFRESH : IT_ZMM_STOCK_UPL_2[].
  ENDIF.

  IF IT_ERROR IS NOT INITIAL.
    PERFORM FILL_CATALOG.
    PERFORM DIS_TABLE.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FILL_ORDER_TEXT_VBBK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_READ_SO  text
*      <--P_IT_ORDER_TEXT  text
*----------------------------------------------------------------------*
FORM FILL_ORDER_TEXT_VBBK   USING  P_LV_READ_SO        TYPE THEAD-TDNAME
                            CHANGING P_IT_ORDER_TEXT   TYPE TT_TEXT.
  CLEAR : LV_TEXT_ID.
  LOOP AT LT_TEXT_IDS_VBBK INTO LV_TEXT_ID.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        ID       = LV_TEXT_ID
        LANGUAGE = SY-LANGU
        NAME     = P_LV_READ_SO
        OBJECT   = 'VBBK'
      TABLES
        LINES    = IT_TEXT_LINES
      EXCEPTIONS
        OTHERS   = 1.

    IF SY-SUBRC = 0.
      CLEAR WA_ORDER_TEXT.
      WA_ORDER_TEXT-TEXT_ID   = LV_TEXT_ID.
      WA_ORDER_TEXT-LANGU     = SY-LANGU.

      LOOP AT IT_TEXT_LINES INTO DATA(LS_LINE).
        WA_ORDER_TEXT-TEXT_LINE = LS_LINE-TDLINE .
        APPEND WA_ORDER_TEXT TO P_IT_ORDER_TEXT.
      ENDLOOP.
    ENDIF.

    REFRESH : IT_TEXT_LINES[].
    CLEAR WA_ORDER_TEXT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FILL_ORDER_TEXT_VBBP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_READ_SO  text
*      -->P_LV_COUNT    text
*      <--P_IT_ORDER_TEXT  text
*----------------------------------------------------------------------*
FORM FILL_ORDER_TEXT_VBBP  USING    P_LV_READ_SO     TYPE THEAD-TDNAME
                                    P_LV_COUNT       TYPE CHAR6
                           CHANGING P_IT_ORDER_TEXT  TYPE TT_TEXT.
  CLEAR : LV_TEXT_ID.
  LOOP AT LT_TEXT_IDS_VBBP INTO LV_TEXT_ID.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        ID       = LV_TEXT_ID
        LANGUAGE = SY-LANGU
        NAME     = P_LV_READ_SO
        OBJECT   = 'VBBP'
      TABLES
        LINES    = IT_TEXT_LINES
      EXCEPTIONS
        OTHERS   = 1.

    IF SY-SUBRC = 0.
      CLEAR WA_ORDER_TEXT.
      WA_ORDER_TEXT-TEXT_ID     = LV_TEXT_ID.
      WA_ORDER_TEXT-LANGU       = SY-LANGU.
      WA_ORDER_TEXT-ITM_NUMBER  = P_LV_COUNT.

      LOOP AT IT_TEXT_LINES INTO DATA(LS_LINE).
        WA_ORDER_TEXT-TEXT_LINE = LS_LINE-TDLINE.
        APPEND WA_ORDER_TEXT TO P_IT_ORDER_TEXT.
      ENDLOOP.
    ENDIF.

    REFRESH : IT_TEXT_LINES[].
    CLEAR WA_ORDER_TEXT.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CONFIGURATION_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_CUOBJ  text
*      -->P_WA_VBAKR_SPART  text
*      -->P_LV_CNFG_ID  text
*      -->P_LV_ROOT_ID  text
*      <--P_IT_BSALES_CFGS_VALUE  text
*      <--P_IT_BSALES_CFGS_VK  text
*----------------------------------------------------------------------*
FORM GET_CONFIGURATION_DATA  USING    P_LV_CUOBJ              TYPE INOB-CUOBJ
                                      P_WA_VBAKR_SPART        TYPE VBAK-SPART
                                      P_LV_CNFG_ID            TYPE CHAR6
                                      P_LV_ROOT_ID            TYPE CHAR8
                             CHANGING P_IT_BSALES_CFGS_VALUE  TYPE TT_CONFIG
                                      P_IT_BSALES_CFGS_VK     TYPE TT_CUVK.
  IF P_LV_CUOBJ IS NOT INITIAL.
    BREAK ABAP03.
    REFRESH IT_CONFIG.
    CALL FUNCTION 'VC_I_GET_CONFIGURATION'
      EXPORTING
        INSTANCE            = P_LV_CUOBJ
      TABLES
        CONFIGURATION       = IT_CONFIG
      EXCEPTIONS
        INSTANCE_NOT_FOUND  = 1
        INTERNAL_ERROR      = 2
        NO_CLASS_ALLOCATION = 3
        INSTANCE_NOT_VALID  = 4
        OTHERS              = 5.

    IF IT_CONFIG IS NOT INITIAL.
      SORT IT_CONFIG BY ATNAM.

      IF P_WA_VBAKR_SPART = '10'.
        DELETE IT_CONFIG WHERE ATNAM NOT IN S_ATNAM10.
      ELSEIF P_WA_VBAKR_SPART = '25'.
        DELETE IT_CONFIG WHERE ATNAM NOT IN S_ATNAM25.
      ELSEIF P_WA_VBAKR_SPART = '65'.
        DELETE IT_CONFIG WHERE ATNAM NOT IN S_ATNAM65.
      ENDIF.

      IF IT_CONFIG IS NOT INITIAL.

        LOOP AT IT_CONFIG INTO WA_CONFIG.
          IF WA_CONFIG-ATWRT IS NOT INITIAL.

            WA_BSALES_CFGS_VALUE-CONFIG_ID = P_LV_CNFG_ID.
            WA_BSALES_CFGS_VALUE-INST_ID   = P_LV_ROOT_ID.
            WA_BSALES_CFGS_VALUE-CHARC     = WA_CONFIG-ATNAM.
            WA_BSALES_CFGS_VALUE-VALUE     = WA_CONFIG-ATWRT.
            APPEND WA_BSALES_CFGS_VALUE TO IT_BSALES_CFGS_VALUE.
            CLEAR : WA_BSALES_CFGS_VALUE.

            WA_BSALES_CFGS_VK-CONFIG_ID   = P_LV_CNFG_ID.
            WA_BSALES_CFGS_VK-INST_ID     = P_LV_ROOT_ID.
*            WA_BSALES_CFGS_VK-VKEY        = WA_CONFIG-ATBEZ.
            WA_BSALES_CFGS_VK-VKEY        = WA_CONFIG-ATNAM.
            APPEND WA_BSALES_CFGS_VK TO IT_BSALES_CFGS_VK.
            CLEAR : WA_BSALES_CFGS_VK.

            CLEAR : WA_CONFIG.
          ENDIF.
        ENDLOOP.

      ENDIF. " IF IT_CONFIG IS NOT INITIAL.
    ENDIF. " IF IT_CONFIG IS NOT INITIAL.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FILL_CATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FILL_CATALOG .
  DATA :L_TABNAME TYPE LVC_S_FCAT-TABNAME VALUE 'IT_ERROR'.

  PERFORM FILL_CAT_LOG USING : L_TABNAME   'VBELN'    'SO No'        '' 'X',
                               L_TABNAME   'ZSTATUS'  'Status'       '' 'X',
                               L_TABNAME   'ZMESSAGE' 'Message'      '' 'X',
                               L_TABNAME   'VBELN_N'  'New SO No.'   '' 'X'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FILL_CAT_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_TABNAME  text
*      -->P_2387   text
*      -->P_2388   text
*      -->P_2389   text
*      -->P_2390   text
*----------------------------------------------------------------------*
FORM FILL_CAT_LOG  USING P_TABNAME   TYPE SLIS_FIELDCAT_ALV-TABNAME
                         P_FIELDNAME TYPE SLIS_FIELDCAT_ALV-FIELDNAME
                         P_SELTEXT   TYPE SLIS_FIELDCAT_ALV-SELTEXT_L
                         P_NOOUT     TYPE SLIS_FIELDCAT_ALV-NO_OUT
                         P_KEY       TYPE SLIS_FIELDCAT_ALV-KEY.

  WA_FCAT-FIELDNAME  =  P_FIELDNAME.
  WA_FCAT-IFIELDNAME  = P_SELTEXT.
  WA_FCAT-DATATYPE = 'CHAR'.
  WA_FCAT-INTLEN = 50.
  APPEND WA_FCAT TO IT_FCAT.
  WA_FCATLOG-TABNAME     = P_TABNAME.
  WA_FCATLOG-FIELDNAME   = P_FIELDNAME.
  WA_FCATLOG-SELTEXT_L   = P_SELTEXT.
  WA_FCATLOG-NO_OUT      = P_NOOUT.
  WA_FCATLOG-KEY         = P_KEY.
  APPEND WA_FCATLOG TO IT_FCATLOG.
  CLEAR WA_FCATLOG.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DIS_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DIS_TABLE.

  CLEAR : WA_LAYOUT.
  WA_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  WA_LAYOUT-ZEBRA             = 'X'.
  WA_LAYOUT-NO_COLHEAD = SPACE.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM = SY-REPID
      IT_FIELDCAT        = IT_FCATLOG
      IS_LAYOUT          = WA_LAYOUT
      I_SAVE             = 'X'
    TABLES
      T_OUTTAB           = IT_ERROR[]
    EXCEPTIONS
      PROGRAM_ERROR      = 1
      OTHERS             = 2.
  IF SY-SUBRC <> 0.
    WRITE:/ 'Error While Displaying Record'.
  ENDIF.

ENDFORM.